<?xml version="1.0" encoding="utf-8"?>

<article id="article"
		xmlns="http://docbook.org/ns/docbook" version="5.0">
<title>General Information</title>

<info>
<author>
   <personname>
	<honorific>Dr</honorific>
	<firstname>Lowel</firstname>
	<surname>O'Mard</surname>
	<othername role='mi'>P</othername>
	</personname>
	<affiliation>
	<address><email>lowel.omard@gmail.com</email></address>
	</affiliation>
</author>
</info>

<sect1><title>General Information</title>

<sect2><title>Introduction</title>
<para>
This is @PACKAGE@ version @VERSION@.  The @PACKAGE@ application provides
interfaces to Matlab(tm), via Java; Python and also Octave.  The interfaces
allow users to run and evaluate auditory models written using development
system for auditory modelling (DSAM) simulation scripts. DSAM provides access
to an extensive collection of published and other auditory models, as well as
a wide variety of analysis and utility functions.  Examples scripts showing how the
interfaces can be used are included in the installation.
</para>

<para>
The @PACKAGE@ currently has three interfaces which provide direct access to
DSAM simulations:
</para>

<orderedlist numeration="lowerroman">
	<listitem>
		<para>RunDSAMSimJ - java interface (Matlab etc));</para>
	</listitem>
	<listitem>
		<para>PyRunDSAMSim - python interface;</para>
	</listitem>
	<listitem>
		<para>RunDSAMSim.mex - mex file (Octave)</para>
	</listitem>
</orderedlist>

<para>
The official web site is:

	http://dsam.org.uk
</para>

<para>
A mailing list is located at: dsam@jiscmail.ac.uk

To subscribe: visit the web site at:

	http://www.jiscmail.ac.uk/dsam
</para>

</sect2>

<sect2><title>Java interface (MatLab)</title>
<para>
The "RunDSAMSimJ" java interface has been tested with Matlab 2007b, 2009a and
should work with any version of Matlab.  It uses a java application which is
supported by a dynamic link library (DLL).  Octave users should use the 
RunDSAMSim.mex interface as octave currently has no java support.
</para>

</sect2>

<sect2><title>Python interface</title>

<para>
The python interface uses the Python <emphasis>ctypes</emphasis> foreign
function library which allows python to connect directly to a DSAM DLL.
Under Microsoft Windows the RunDSAMSim package will install all the necessary
support files and update the environment variables, i.e
<emphasis>PYTHONPATH</emphasis>.
</para>

</sect2>

<sect2><title>Octave interface</title>
<para>
Octave currently has no java support so the (original) RunDSAMSim.mex can be
used. This will come ready compiled with binary installations, but can also
be compiled using the package's auto-configuration setup.
This interface requires that the DSAM library be installed.
</para>

</sect2>

</sect1>

<sect1><title>Installation</title>

<para>
Windows self-extracting installations require no additional configuration.
</para>

<para>
Under Linux/Unix systems the autoconf auto-configuration system is used if 
no ready-compiled installation is available.  Linux/Unix users needing to compile
@PACKAGE@ should refer to the file 'INSTALL' for further information.
</para>

</sect1>

<sect1><title>Matlab Configuration</title>

<para>
Two matlab configuration files need to be edited: "classpath.txt" and
"librarypath.txt".   Usually the path is "&lt;matlab installation
directory&gt;\toolbox\local", alternatively the path to these files can be found
by starting matlab and issuing the commands "edit classpath.txt" and "edit
librarypath.txt". On most installations this will open the files and the file
path will be shown in the editor window title.
</para>

<para>
Usually these files will require special privileges in order to
make changes to them. On Windows Vista, open the Notepad text editor with
administrator privileges, i.e. "start menu"->"Accessories", right-click on
the "Notepad" application to open the dialog window and choose "Run as administrator".
</para>

<para>
On Linux/Unix systems super user access will be required, i.e. using "sudo" or
"su".  Your may need to get your system administrator to do this configuration
if you do not have sufficient privileges on your system.
</para>

<sect2><title>Changes to classpath.txt</title>

<para>
Append the full path to the <emphasis>jar</emphasis> file.  For default
installations the added line should look as follows for Windows Vista:
</para>

<para>
c:\Program Files\Common Files\dsam\RunDSAMSimjni-@VERSION@.jar
</para>

</sect2>

<sect2><title>Changes to librarypath.txt</title>

<para>
Append the full path to the support files for the package.  For default
installations the added line should read as follows for Windows Vista:
</para>

<para>
C:\Program Files\Common Files\dsam
</para>

</sect2>

</sect1>

<sect1><title>Python environment</title>
<para>
Many scientists today are turning to Python as a fast prototyping, but
nonetheless powerful programming language for scientific computing.  This is
especially so since the development of the Numpy and SciPy python libraries
which provide array processing and a collection of mathematical algorithms
that rival systems such as MatLab, Octave, R-lab and SciLab.  There is also the
Matplotlib module which allows the easy production of publish quality plots.
</para>

<para>
Following a suggestion from a DSAM user (thank you Marek Rudniki) python is
now the platform of choice for interfacing with DSAM and for testing and
analysis of the DSAM library.
</para>

<para>
The python environment that the interface expects uses only modules which are
freely available and the interface has been tested on both Linux and windows
 32-/64-bit platforms.  The minimum python modules required are:
</para>

<itemizedlist>
	<listitem>
		<para>Numpy - Array processing library (numeric.scipy.org)</para>
	</listitem>
	<listitem>
		<para>SciPy - collection of mathematical algorithms(www.scipy.org);</para>
	</listitem>
	<listitem>
		<para>MatPlotlib - data analysis and visualisation library
		(sourceforge.net/projects/matplotlib).</para>
	</listitem>
</itemizedlist>

<para>
These modules are available in 32-bit and 64-bit for Microsoft Windows and are
among the base packages of Linux distributions such as Ubuntu or Fedora.
There are also integrated development environments (IDEs) for python such as
<emphasis>Spyder</emphasis> the scientific Python development envronment
(spyderlib.googlecode.com).  
</para>
</sect1>

<sect1><title>Testing/Examples</title>

<sect2><title>Before you start</title>
<para>
You should make a copy of the <emphasis>Examples</emphasis> directory to use as the
basis of your own code.  You should also do this so that the original code
can be kept as a reference.
</para>

<para>
The demonstration calculates the post-stimulus time histogram and rate-intensity
curves for a model VCN Onset-C cell.  This is a moderately complex simulation
including a ten-channel basilar membrane configuration and incorporating a
Hodgkin-Huxley neural cell model innervated by low-, medium- and high-spontaneous
rate auditory nerve fibres.
On an Intel(R) Core (TM) Duo 2.33 GHz system the demonstration takes
approximately three minutes to run and produce both figures.
</para>

</sect2>

<sect2><title>Matlab/Octave</title>

<para>
Start Matlab and change the current directory to the <emphasis>Examples</emphasis>
directory.  On default Windows installations this directory will be found in the
directory <emphasis>C:\Program Files\DSAM Applications\RunDSAMSim"</emphasis>.
</para>

<para>
Run the <emphasis>MatlabDemoRunDSAMSim.m</emphasis> script using the command:
</para>

<para>
>> MatlabDemoRunDSAMSim([1 2], 'java');
</para>

<para>
Octave users should omit the second argument: "java" to run the demonstration
using the RunDSAMSim.mex interface file.
</para>

</sect2>

<sect2><title>Python</title>

<para>
The <emphasis>DemoRunDSAMSim.py</emphasis> script, as is common with python
scripts, can by run in several ways.  Using the command line you can change to
the RunDSAMSim Examples directory (you should have made a copy of this
directory in your own work space) and issue the command:
</para>

<para>
python DemoRunDSAMSim.py
</para>

<para>
This will run the default main statements and produce both the post-stimulus
time histogram (PSTH) and the rate-intensity function (RIF).
</para>

<para>
Alternatively you can start python and change to the RunDSAMSim Examples
directory; if you are not using Spyder, where you can set the working directory,
nor using an interactive python shell such as <emphasis>ipython</emphasis> which
provides a "cd" command, then issue the statements
</para>

<para>
>>>import os
</para>
<para>
>>>os.chdir("&lt;Path to RunDSAMSim&gt;/Examples")
</para>

<para>
The ">>>" characters is the python prompt.  Now import the DemoRunDSAMSim
module using the command:
</para>

<para>
>>>from DemoRunDSAMSim import *
</para>

<para>
You can now run the demonstration script using the command:
</para>

<para>
>>>RunDemo(["psth", "rif"])
</para>

<para>
You can produce the <emphasis>psth</emphasis> or <emphasis>rif</emphasis>
individually by omitting the other in the list.
</para>

</sect2>

</sect1>

<sect1><title>DSAM Library Documentation and Supporting DSAM</title>

<para>
If you find @PACKAGE@ useful you can help provide support for the project by
purchasing the DSAM Library Documentation.  DSAM Library Documentation is the
definitive guide to using the development system for auditory modelling (DSAM).
It provides the missing documentation to realize the full potential of running
simulations using DSAM, including example scripts and parameter settings showing
how to use each module.  In particular details are provided to harness the
full features of DSAM simulation scripting.
</para>

<para>
Links to the DSAM Library Documentation can be found from the DSAM website: Follow
the "Documentation links."
</para>

</sect1>

<sect1><title>Version Numbering</title>

<para>
The primary @PACKAGE@ version information (i.e. "@VERSION@") consists of three numbers
separated by a period (full stop):
</para>

<para>
&lt;major number&gt;.&lt;minor number&gt;.&lt;revision&gt;
</para>

<para>
The major number is increased when there are significant jumps in functionality,
the minor number is incremented when only minor features or significant fixes have been
added, and the revision number is incremented when minor bugs are fixed.
Self-extracting installations such as for windows or Linux RPM or Debian packages will have an
additional version number, which describes changes in the installation configuration
rather than the application itself.
</para>

</sect1>

<sect1><title>How to report bugs</title>

<para>
To report a bug, send mail either to the dsam list, as mentioned
above.  In the mail include:
</para>

<itemizedlist>
<listitem>
	<para>
	The version of @PACKAGE@
	</para>
</listitem>
<listitem>
	<para>
	A directory containing all of the files - DSAM and matlab scripts - to reproduce the 
	problem.
	</para>
</listitem>
<listitem>
	<para>
	Information about your system. For instance:
	</para>
	<itemizedlist>
		<listitem><para>What operating system and version</para></listitem>
		<listitem><para>What version of X</para></listitem>
		<listitem><para>What version of the C library (Linux)</para></listitem>
	</itemizedlist>
	<para> - and anything else you think is relevant.</para>
</listitem>
<listitem>
	<para>
	How to reproduce the bug. 
	</para>
</listitem>

<listitem>
	<para>If the bug was a crash, the exact text that was printed out when
  the crash occurred.
	</para>
</listitem>
<listitem>
	<para>Further information such as stack traces may be useful, but is
  not necessary.
	</para>
</listitem>
</itemizedlist>

</sect1>

</article>
